{"version":3,"file":"globalhandlers.js","sourceRoot":"","sources":["../../src/integrations/globalhandlers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE7C,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EAAE,mBAAmB,EAAE,MAAM,YAAY,CAAC;AACjD,OAAO,EACL,oBAAoB,EACpB,sCAAsC,EAEtC,SAAS,GACV,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,mBAAmB,EAAE,MAAM,WAAW,CAAC;AAQhD,sBAAsB;AACtB,MAAM,OAAO,cAAc;IAczB,YAAY;IACZ,YAAmB,OAAoC;QAdvD;;WAEG;QACI,SAAI,GAAW,cAAc,CAAC,EAAE,CAAC;QAYtC,IAAI,CAAC,OAAO,GAAG;YACb,OAAO,EAAE,IAAI;YACb,oBAAoB,EAAE,IAAI;YAC1B,GAAG,OAAO;SACX,CAAC;IACJ,CAAC;IACD;;OAEG;IACI,SAAS;QACd,SAAS,CAAC,CAAC,KAAyB,EAAE,CAAU,EAAE,KAAY,EAAE,EAAE;YAChE,2EAA2E;YAC3E,IAAI;YACJ,cAAc;YACd,UAAU;YACV,6BAA6B;YAC7B,mDAAmD;YACnD,mDAAmD;YACnD,yBAAyB;YACzB,aAAa;YACb,UAAU;YACV,6BAA6B;YAC7B,oBAAoB;YACpB,cAAc;YACd,IAAI;YACJ,IAAI,mBAAmB,EAAE,EAAE;gBACzB,OAAO;aACR;YACD,MAAM,IAAI,GAAG,aAAa,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC5D,IAAI,IAAI,EAAE;gBACR,aAAa,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,EAAE,EAAE,iBAAiB,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;aACjH;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACxB,MAAM,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;YAC/C,oBAAoB,EAAE,CAAC;SACxB;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;YACrC,MAAM,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;YAC5D,sCAAsC,EAAE,CAAC;SAC1C;IACH,CAAC;IAED,YAAY;IACJ,sBAAsB,CAAC,UAA8B;QAC3D,MAAM,KAAK,GAAG,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAC9C,OAAO;YACL,GAAG,KAAK;YACR,SAAS,EAAE;gBACT,GAAG,KAAK,CAAC,SAAS;gBAClB,SAAS,EAAE;oBACT,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU,CAAC,IAAI;qBACtB;oBACD,OAAO,EAAE,KAAK;oBACd,IAAI,EAAE,UAAU,CAAC,SAAS;iBAC3B;aACF;SACF,CAAC;IACJ,CAAC;;AAvED;;GAEG;AACW,iBAAE,GAAW,gBAAgB,CAAC","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Integration, SentryEvent } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { eventFromStacktrace } from '../parsers';\nimport {\n  installGlobalHandler,\n  installGlobalUnhandledRejectionHandler,\n  StackTrace as TraceKitStackTrace,\n  subscribe,\n} from '../tracekit';\nimport { shouldIgnoreOnError } from './helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /** JSDoc */\n  private readonly options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this.options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    subscribe((stack: TraceKitStackTrace, _: boolean, error: Error) => {\n      // TODO: use stack.context to get a valuable information from TraceKit, eg.\n      // [\n      //   0: \"  })\"\n      //   1: \"\"\n      //   2: \"  function foo () {\"\n      //   3: \"    Sentry.captureException('some error')\"\n      //   4: \"    Sentry.captureMessage('some message')\"\n      //   5: \"    throw 'foo'\"\n      //   6: \"  }\"\n      //   7: \"\"\n      //   8: \"  function bar () {\"\n      //   9: \"    foo();\"\n      //   10: \"  }\"\n      // ]\n      if (shouldIgnoreOnError()) {\n        return;\n      }\n      const self = getCurrentHub().getIntegration(GlobalHandlers);\n      if (self) {\n        getCurrentHub().captureEvent(self.eventFromGlobalHandler(stack), { originalException: error, data: { stack } });\n      }\n    });\n\n    if (this.options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      installGlobalHandler();\n    }\n\n    if (this.options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      installGlobalUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private eventFromGlobalHandler(stacktrace: TraceKitStackTrace): SentryEvent {\n    const event = eventFromStacktrace(stacktrace);\n    return {\n      ...event,\n      exception: {\n        ...event.exception,\n        mechanism: {\n          data: {\n            mode: stacktrace.mode,\n          },\n          handled: false,\n          type: stacktrace.mechanism,\n        },\n      },\n    };\n  }\n}\n"]}