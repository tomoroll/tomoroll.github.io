{"ast":null,"code":"import _classCallCheck from \"/Users/hoank/resource/N3Company/tmp/etheroll/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hoank/resource/N3Company/tmp/etheroll/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hoank/resource/N3Company/tmp/etheroll/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hoank/resource/N3Company/tmp/etheroll/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hoank/resource/N3Company/tmp/etheroll/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hoank/resource/N3Company/tmp/etheroll/src/components/CoinFlip.jsx\";\nimport React from 'react';\nimport BaseGame from './BaseGame';\nimport BetSize from './BetSize';\nimport ChanceOfWinning from './ChanceOfWinning';\nimport ContractInfo from './ContractInfo';\nimport FlipButton from './FlipButton';\nimport CoinFlipRecap from './CoinFlipRecap';\nimport CoinFlipTransactions from './CoinFlipTransactions';\nimport { Networks, contractAddresses } from '../utils/etheroll-contract';\n\nvar CoinFlip =\n/*#__PURE__*/\nfunction (_BaseGame) {\n  _inherits(CoinFlip, _BaseGame);\n\n  function CoinFlip(props) {\n    var _this;\n\n    _classCallCheck(this, CoinFlip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CoinFlip).call(this, props));\n    _this.state = {\n      accountBalance: 0,\n      betSize: 0.1,\n      chances: 50,\n      contractAddress: contractAddresses[Networks.mainnet],\n      contractBalance: 0,\n      minBet: BetSize.defaultProps.min,\n      maxBet: BetSize.defaultProps.max,\n      // TODO: merge with RollUnder\n      network: Networks.mainnet,\n      minChances: ChanceOfWinning.defaultProps.min,\n      maxChances: ChanceOfWinning.defaultProps.max,\n      filteredTransactions: [],\n      transactionsFilter: '#all-transactions'\n    };\n    return _this;\n  }\n\n  _createClass(CoinFlip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var setState = function setState(dict) {\n        return _this2.setState(dict);\n      };\n\n      this.getWeb3(setState);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.getTransactionsIntervalId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          betSize = _this$state.betSize,\n          accountAddress = _this$state.accountAddress,\n          accountBalance = _this$state.accountBalance,\n          contractAddress = _this$state.contractAddress,\n          contractBalance = _this$state.contractBalance,\n          filteredTransactions = _this$state.filteredTransactions,\n          minBet = _this$state.minBet,\n          maxBet = _this$state.maxBet,\n          network = _this$state.network;\n\n      var setState = function setState(dict) {\n        return _this3.setState(dict);\n      };\n\n      var rollDisabled = accountAddress === null;\n      return React.createElement(React.Fragment, null, React.createElement(ContractInfo, {\n        accountAddress: accountAddress,\n        accountBalance: accountBalance,\n        contractAddress: contractAddress,\n        contractBalance: contractBalance,\n        network: network,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(BetSize, {\n        betSize: betSize,\n        min: minBet,\n        max: maxBet,\n        updateBetSize: this.updateState('betSize'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(CoinFlipRecap, {\n        betSize: betSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(FlipButton, {\n        isDisabled: rollDisabled,\n        onClick: function onClick() {\n          return _this3.onRollClick();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(CoinFlipTransactions, {\n        network: network,\n        onClick: function onClick(transactionsFilter) {\n          return _this3.filterTransactions(transactionsFilter, setState);\n        },\n        transactions: filteredTransactions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CoinFlip;\n}(BaseGame);\n\nCoinFlip.propTypes = BaseGame.propTypes;\nexport default CoinFlip;","map":{"version":3,"sources":["/Users/hoank/resource/N3Company/tmp/etheroll/src/components/CoinFlip.jsx"],"names":["React","BaseGame","BetSize","ChanceOfWinning","ContractInfo","FlipButton","CoinFlipRecap","CoinFlipTransactions","Networks","contractAddresses","CoinFlip","props","state","accountBalance","betSize","chances","contractAddress","mainnet","contractBalance","minBet","defaultProps","min","maxBet","max","network","minChances","maxChances","filteredTransactions","transactionsFilter","setState","dict","getWeb3","clearInterval","getTransactionsIntervalId","accountAddress","rollDisabled","updateState","onRollClick","filterTransactions","propTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BaseGame from './BaseGame';\nimport BetSize from './BetSize';\nimport ChanceOfWinning from './ChanceOfWinning';\nimport ContractInfo from './ContractInfo';\nimport FlipButton from './FlipButton';\nimport CoinFlipRecap from './CoinFlipRecap';\nimport CoinFlipTransactions from './CoinFlipTransactions';\nimport {\n  Networks, contractAddresses,\n} from '../utils/etheroll-contract';\n\n\nclass CoinFlip extends BaseGame {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountBalance: 0,\n      betSize: 0.1,\n      chances: 50,\n      contractAddress: contractAddresses[Networks.mainnet],\n      contractBalance: 0,\n      minBet: BetSize.defaultProps.min,\n      maxBet: BetSize.defaultProps.max,\n      // TODO: merge with RollUnder\n      network: Networks.mainnet,\n      minChances: ChanceOfWinning.defaultProps.min,\n      maxChances: ChanceOfWinning.defaultProps.max,\n      filteredTransactions: [],\n      transactionsFilter: '#all-transactions',\n    };\n  }\n\n  componentDidMount() {\n    const setState = dict => this.setState(dict);\n    this.getWeb3(setState);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.getTransactionsIntervalId);\n  }\n\n  render() {\n    const {\n      betSize, accountAddress, accountBalance, contractAddress, contractBalance,\n      filteredTransactions, minBet, maxBet, network,\n    } = this.state;\n    const setState = dict => this.setState(dict);\n    const rollDisabled = accountAddress === null;\n    return (\n      <>\n        <ContractInfo\n          accountAddress={accountAddress}\n          accountBalance={accountBalance}\n          contractAddress={contractAddress}\n          contractBalance={contractBalance}\n          network={network}\n        />\n        <BetSize betSize={betSize} min={minBet} max={maxBet} updateBetSize={this.updateState('betSize')} />\n        <CoinFlipRecap betSize={betSize} />\n        <FlipButton isDisabled={rollDisabled} onClick={() => this.onRollClick()} />\n        <CoinFlipTransactions\n          network={network}\n          onClick={transactionsFilter => this.filterTransactions(transactionsFilter, setState)}\n          transactions={filteredTransactions}\n        />\n      </>\n    );\n  }\n}\nCoinFlip.propTypes = BaseGame.propTypes;\n\nexport default CoinFlip;\n"]},"metadata":{},"sourceType":"module"}