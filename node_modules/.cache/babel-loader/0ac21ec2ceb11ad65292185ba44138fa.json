{"ast":null,"code":"import _defineProperty from \"/Users/hoank/resource/N3Company/tomoroll-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/hoank/resource/N3Company/tomoroll-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hoank/resource/N3Company/tomoroll-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hoank/resource/N3Company/tomoroll-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hoank/resource/N3Company/tomoroll-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hoank/resource/N3Company/tomoroll-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hoank/resource/N3Company/tomoroll-frontend/src/components/BaseGame.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _getWeb from '../utils/get-web3';\nimport MetaMaskLink from './MetaMaskLink';\nimport { EtherollContract } from '../utils/etheroll-contract';\n\nvar BaseGame =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BaseGame, _React$Component);\n\n  function BaseGame(props) {\n    var _this;\n\n    _classCallCheck(this, BaseGame);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseGame).call(this, props));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(BaseGame, [{\n    key: \"onRollClick\",\n    value: function onRollClick() {\n      var _this$state = this.state,\n          accountAddress = _this$state.accountAddress,\n          chances = _this$state.chances,\n          contract = _this$state.contract,\n          betSize = _this$state.betSize,\n          web3 = _this$state.web3;\n      var rollUnder = chances + 1;\n      var value = web3.toWei(betSize.toString(), 'ether');\n      contract.web3Contract.bet(rollUnder, {\n        from: accountAddress,\n        value: value\n      }, function (error, result) {\n        if (error) {\n          console.error(error);\n        } else {\n          console.log(JSON.stringify(result));\n        }\n      });\n    }\n  }, {\n    key: \"getTransactions\",\n    value: function getTransactions(contract, setState) {\n      var _this2 = this;\n\n      contract.getMergedTransactionLogs(function (error, result) {\n        if (error) {\n          console.log(error);\n        } else {\n          var allTransactions = result; // TODO: should be a prop via composition rather than inheritance\n\n          var transactionsFilter = _this2.state.transactionsFilter;\n          setState({\n            allTransactions: allTransactions\n          });\n\n          _this2.filterTransactions(transactionsFilter, setState);\n        }\n      });\n    }\n    /**\n     * Retrieves web3 and contract info, then sets the following states:\n     * - accountAddress\n     * - accountBalance\n     * - contract\n     * - contractAddress\n     * - contractBalance\n     * - minBet\n     * - maxBet\n     * - maxChances\n     * - network\n     * - web3\n     */\n\n  }, {\n    key: \"getWeb3\",\n    value: function getWeb3(setState) {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          showMessage = _this$props.showMessage,\n          showWarningMessage = _this$props.showWarningMessage;\n\n      _getWeb.then(function (results) {\n        var web3 = results.web3;\n        var contract = new EtherollContract(web3);\n        var contractAddress = contract.address;\n        var pullIntervalSeconds = 10 * 1000; // clearInterval() is in the componentWillUnmount()\n\n        _this3.getTransactionsIntervalId = setInterval(function () {\n          return _this3.getTransactions(contract, setState);\n        }, pullIntervalSeconds);\n\n        _this3.getTransactions(contract, setState);\n\n        setState({\n          web3: web3,\n          network: Number(web3.version.network),\n          contract: contract,\n          contractAddress: contractAddress\n        });\n        setState({\n          minBet: 0.0001\n        });\n        setState({\n          minChances: 1\n        });\n        setState({\n          maxChances: 95\n        });\n        web3.eth.getBalance(contractAddress, function (error, balance) {\n          // error can be null with the balance also null in rare cases\n          if (error || balance === null) {\n            var message = \"Can't fetch contract balance.\";\n\n            _this3.showFetchContractInfoWarning(message);\n          } else {\n            var contractBalance = web3.fromWei(balance, 'ether').toNumber();\n            setState({\n              contractBalance: contractBalance\n            });\n          }\n        });\n        web3.eth.getAccounts(function (error, accounts) {\n          if (error) {\n            var message = \"Can't retrieve accounts.\";\n            showWarningMessage(message);\n          } else {\n            var accountAddress = accounts.length === 0 ? null : accounts[0];\n\n            if (accountAddress !== null) {\n              web3.eth.getBalance(accountAddress, function (err, balance) {\n                // error can be null with the balance also null in rare cases\n                if (err || balance === null) {\n                  var _message = \"Can't fetch account balance.\";\n                  showWarningMessage(_message);\n                } else {\n                  var accountBalance = web3.fromWei(balance, 'ether').toNumber();\n                  setState({\n                    accountBalance: accountBalance\n                  });\n                }\n              });\n            }\n\n            setState({\n              accountAddress: accountAddress\n            });\n          }\n        });\n      }, function () {\n        var classType = 'danger';\n        var message = React.createElement(React.Fragment, null, 'No account connected, connect with a Web3-compatible wallet like ', React.createElement(MetaMaskLink, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }));\n        showMessage(classType, message);\n      });\n    }\n  }, {\n    key: \"showFetchContractInfoWarning\",\n    value: function showFetchContractInfoWarning(optionalMessage) {\n      var showWarningMessage = this.props.showWarningMessage;\n      var defaultMessage = \"Can't fetch contract info.\";\n      var message = typeof optionalMessage === 'undefined' ? defaultMessage : optionalMessage;\n      showWarningMessage(message);\n    }\n  }, {\n    key: \"filterTransactions\",\n    value: function filterTransactions(transactionsFilter, setState) {\n      // TODO: should be a prop via composition rather than inheritance\n      var _this$state2 = this.state,\n          accountAddress = _this$state2.accountAddress,\n          allTransactions = _this$state2.allTransactions;\n      var filteredTransactions = allTransactions.slice();\n\n      if (transactionsFilter === '#my-transactions') {\n        filteredTransactions = allTransactions.filter(function (transaction) {\n          return transaction.logBetEvent.args.from.toLowerCase() === accountAddress.toLowerCase();\n        });\n      }\n\n      setState({\n        filteredTransactions: filteredTransactions,\n        transactionsFilter: transactionsFilter\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(key) {\n      var _this4 = this;\n\n      return function (value) {\n        _this4.setState(_defineProperty({}, key, value));\n      };\n    }\n  }]);\n\n  return BaseGame;\n}(React.Component);\n\nBaseGame.propTypes = {\n  showMessage: PropTypes.func.isRequired,\n  showWarningMessage: PropTypes.func.isRequired\n};\nexport default BaseGame;","map":{"version":3,"sources":["/Users/hoank/resource/N3Company/tomoroll-frontend/src/components/BaseGame.jsx"],"names":["React","PropTypes","getWeb3","MetaMaskLink","EtherollContract","BaseGame","props","state","accountAddress","chances","contract","betSize","web3","rollUnder","value","toWei","toString","web3Contract","bet","from","error","result","console","log","JSON","stringify","setState","getMergedTransactionLogs","allTransactions","transactionsFilter","filterTransactions","showMessage","showWarningMessage","then","results","contractAddress","address","pullIntervalSeconds","getTransactionsIntervalId","setInterval","getTransactions","network","Number","version","minBet","minChances","maxChances","eth","getBalance","balance","message","showFetchContractInfoWarning","contractBalance","fromWei","toNumber","getAccounts","accounts","length","err","accountBalance","classType","optionalMessage","defaultMessage","filteredTransactions","slice","filter","transaction","logBetEvent","args","toLowerCase","key","Component","propTypes","func","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SACEC,gBADF,QAEO,4BAFP;;IAKMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa,EAAb;AAFiB;AAIlB;;;;kCAEa;AAAA,wBAGR,KAAKA,KAHG;AAAA,UAEVC,cAFU,eAEVA,cAFU;AAAA,UAEMC,OAFN,eAEMA,OAFN;AAAA,UAEeC,QAFf,eAEeA,QAFf;AAAA,UAEyBC,OAFzB,eAEyBA,OAFzB;AAAA,UAEkCC,IAFlC,eAEkCA,IAFlC;AAIZ,UAAMC,SAAS,GAAGJ,OAAO,GAAG,CAA5B;AACA,UAAMK,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAWJ,OAAO,CAACK,QAAR,EAAX,EAA+B,OAA/B,CAAd;AACAN,MAAAA,QAAQ,CAACO,YAAT,CAAsBC,GAAtB,CACEL,SADF,EACa;AAAEM,QAAAA,IAAI,EAAEX,cAAR;AAAwBM,QAAAA,KAAK,EAALA;AAAxB,OADb,EAEE,UAACM,KAAD,EAAQC,MAAR,EAAmB;AACjB,YAAID,KAAJ,EAAW;AACTE,UAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,SAFD,MAEO;AACLE,UAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAZ;AACD;AACF,OARH;AAUD;;;oCAEeX,Q,EAAUgB,Q,EAAU;AAAA;;AAClChB,MAAAA,QAAQ,CAACiB,wBAAT,CAAkC,UAACP,KAAD,EAAQC,MAAR,EAAmB;AACnD,YAAID,KAAJ,EAAW;AACTE,UAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD,SAFD,MAEO;AACL,cAAMQ,eAAe,GAAGP,MAAxB,CADK,CAEL;;AAFK,cAGGQ,kBAHH,GAG0B,MAAI,CAACtB,KAH/B,CAGGsB,kBAHH;AAILH,UAAAA,QAAQ,CAAC;AAAEE,YAAAA,eAAe,EAAfA;AAAF,WAAD,CAAR;;AACA,UAAA,MAAI,CAACE,kBAAL,CAAwBD,kBAAxB,EAA4CH,QAA5C;AACD;AACF,OAVD;AAWD;AAED;;;;;;;;;;;;;;;;4BAaQA,Q,EAAU;AAAA;;AAAA,wBAC4B,KAAKpB,KADjC;AAAA,UACRyB,WADQ,eACRA,WADQ;AAAA,UACKC,kBADL,eACKA,kBADL;;AAEhB9B,MAAAA,OAAO,CAAC+B,IAAR,CAAa,UAACC,OAAD,EAAa;AAAA,YAChBtB,IADgB,GACPsB,OADO,CAChBtB,IADgB;AAExB,YAAMF,QAAQ,GAAG,IAAIN,gBAAJ,CAAqBQ,IAArB,CAAjB;AACA,YAAMuB,eAAe,GAAGzB,QAAQ,CAAC0B,OAAjC;AACA,YAAMC,mBAAmB,GAAG,KAAK,IAAjC,CAJwB,CAKxB;;AACA,QAAA,MAAI,CAACC,yBAAL,GAAiCC,WAAW,CAAC;AAAA,iBACxC,MAAI,CAACC,eAAL,CAAqB9B,QAArB,EAA+BgB,QAA/B,CADwC;AAAA,SAAD,EACGW,mBADH,CAA5C;;AAEA,QAAA,MAAI,CAACG,eAAL,CAAqB9B,QAArB,EAA+BgB,QAA/B;;AACAA,QAAAA,QAAQ,CAAC;AACPd,UAAAA,IAAI,EAAJA,IADO;AAEP6B,UAAAA,OAAO,EAAEC,MAAM,CAAC9B,IAAI,CAAC+B,OAAL,CAAaF,OAAd,CAFR;AAGP/B,UAAAA,QAAQ,EAARA,QAHO;AAIPyB,UAAAA,eAAe,EAAfA;AAJO,SAAD,CAAR;AAMET,QAAAA,QAAQ,CAAC;AAAEkB,UAAAA,MAAM,EAAE;AAAV,SAAD,CAAR;AACAlB,QAAAA,QAAQ,CAAC;AAAEmB,UAAAA,UAAU,EAAE;AAAd,SAAD,CAAR;AACAnB,QAAAA,QAAQ,CAAC;AAAEoB,UAAAA,UAAU,EAAE;AAAd,SAAD,CAAR;AAGFlC,QAAAA,IAAI,CAACmC,GAAL,CAASC,UAAT,CAAoBb,eAApB,EAAqC,UAACf,KAAD,EAAQ6B,OAAR,EAAoB;AACvD;AACA,cAAI7B,KAAK,IAAI6B,OAAO,KAAK,IAAzB,EAA+B;AAC7B,gBAAMC,OAAO,GAAG,+BAAhB;;AACA,YAAA,MAAI,CAACC,4BAAL,CAAkCD,OAAlC;AACD,WAHD,MAGO;AACL,gBAAME,eAAe,GAAGxC,IAAI,CAACyC,OAAL,CAAaJ,OAAb,EAAsB,OAAtB,EAA+BK,QAA/B,EAAxB;AACA5B,YAAAA,QAAQ,CAAC;AAAE0B,cAAAA,eAAe,EAAfA;AAAF,aAAD,CAAR;AACD;AACF,SATD;AAUAxC,QAAAA,IAAI,CAACmC,GAAL,CAASQ,WAAT,CAAqB,UAACnC,KAAD,EAAQoC,QAAR,EAAqB;AACxC,cAAIpC,KAAJ,EAAW;AACT,gBAAM8B,OAAO,GAAG,0BAAhB;AACAlB,YAAAA,kBAAkB,CAACkB,OAAD,CAAlB;AACD,WAHD,MAGO;AACL,gBAAM1C,cAAc,GAAGgD,QAAQ,CAACC,MAAT,KAAoB,CAApB,GAAwB,IAAxB,GAA+BD,QAAQ,CAAC,CAAD,CAA9D;;AACA,gBAAIhD,cAAc,KAAK,IAAvB,EAA6B;AAC3BI,cAAAA,IAAI,CAACmC,GAAL,CAASC,UAAT,CAAoBxC,cAApB,EAAoC,UAACkD,GAAD,EAAMT,OAAN,EAAkB;AACpD;AACA,oBAAIS,GAAG,IAAIT,OAAO,KAAK,IAAvB,EAA6B;AAC3B,sBAAMC,QAAO,GAAG,8BAAhB;AACAlB,kBAAAA,kBAAkB,CAACkB,QAAD,CAAlB;AACD,iBAHD,MAGO;AACL,sBAAMS,cAAc,GAAG/C,IAAI,CAACyC,OAAL,CAAaJ,OAAb,EAAsB,OAAtB,EAA+BK,QAA/B,EAAvB;AACA5B,kBAAAA,QAAQ,CAAC;AAAEiC,oBAAAA,cAAc,EAAdA;AAAF,mBAAD,CAAR;AACD;AACF,eATD;AAUD;;AACDjC,YAAAA,QAAQ,CAAC;AAAElB,cAAAA,cAAc,EAAdA;AAAF,aAAD,CAAR;AACD;AACF,SApBD;AAqBD,OAnDD,EAmDG,YAAM;AACP,YAAMoD,SAAS,GAAG,QAAlB;AACA,YAAMV,OAAO,GAAI,0CACd,mEADc,EAEf,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFe,CAAjB;AAIAnB,QAAAA,WAAW,CAAC6B,SAAD,EAAYV,OAAZ,CAAX;AACD,OA1DD;AA2DD;;;iDAE4BW,e,EAAiB;AAAA,UACpC7B,kBADoC,GACb,KAAK1B,KADQ,CACpC0B,kBADoC;AAE5C,UAAM8B,cAAc,GAAG,4BAAvB;AACA,UAAMZ,OAAO,GAAI,OAAOW,eAAP,KAA2B,WAA5B,GAA2CC,cAA3C,GAA4DD,eAA5E;AACA7B,MAAAA,kBAAkB,CAACkB,OAAD,CAAlB;AACD;;;uCAEkBrB,kB,EAAoBH,Q,EAAU;AAC/C;AAD+C,yBAEH,KAAKnB,KAFF;AAAA,UAEvCC,cAFuC,gBAEvCA,cAFuC;AAAA,UAEvBoB,eAFuB,gBAEvBA,eAFuB;AAG/C,UAAImC,oBAAoB,GAAGnC,eAAe,CAACoC,KAAhB,EAA3B;;AACA,UAAInC,kBAAkB,KAAK,kBAA3B,EAA+C;AAC7CkC,QAAAA,oBAAoB,GAAGnC,eAAe,CAACqC,MAAhB,CAAuB,UAAAC,WAAW;AAAA,iBACvDA,WAAW,CAACC,WAAZ,CAAwBC,IAAxB,CAA6BjD,IAA7B,CAAkCkD,WAAlC,OAAoD7D,cAAc,CAAC6D,WAAf,EADG;AAAA,SAAlC,CAAvB;AAGD;;AACD3C,MAAAA,QAAQ,CAAC;AAAEqC,QAAAA,oBAAoB,EAApBA,oBAAF;AAAwBlC,QAAAA,kBAAkB,EAAlBA;AAAxB,OAAD,CAAR;AACD;;;gCAEWyC,G,EAAK;AAAA;;AACf,aAAO,UAACxD,KAAD,EAAW;AAChB,QAAA,MAAI,CAACY,QAAL,qBAAiB4C,GAAjB,EAAuBxD,KAAvB;AACD,OAFD;AAGD;;;;EA1IoBd,KAAK,CAACuE,S;;AA4I7BlE,QAAQ,CAACmE,SAAT,GAAqB;AACnBzC,EAAAA,WAAW,EAAE9B,SAAS,CAACwE,IAAV,CAAeC,UADT;AAEnB1C,EAAAA,kBAAkB,EAAE/B,SAAS,CAACwE,IAAV,CAAeC;AAFhB,CAArB;AAKA,eAAerE,QAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport getWeb3 from '../utils/get-web3';\nimport MetaMaskLink from './MetaMaskLink';\nimport {\n  EtherollContract,\n} from '../utils/etheroll-contract';\n\n\nclass BaseGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  onRollClick() {\n    const {\n      accountAddress, chances, contract, betSize, web3,\n    } = this.state;\n    const rollUnder = chances + 1;\n    const value = web3.toWei(betSize.toString(), 'ether');\n    contract.web3Contract.bet(\n      rollUnder, { from: accountAddress, value },\n      (error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          console.log(JSON.stringify(result));\n        }\n      },\n    );\n  }\n\n  getTransactions(contract, setState) {\n    contract.getMergedTransactionLogs((error, result) => {\n      if (error) {\n        console.log(error);\n      } else {\n        const allTransactions = result;\n        // TODO: should be a prop via composition rather than inheritance\n        const { transactionsFilter } = this.state;\n        setState({ allTransactions });\n        this.filterTransactions(transactionsFilter, setState);\n      }\n    });\n  }\n\n  /**\n   * Retrieves web3 and contract info, then sets the following states:\n   * - accountAddress\n   * - accountBalance\n   * - contract\n   * - contractAddress\n   * - contractBalance\n   * - minBet\n   * - maxBet\n   * - maxChances\n   * - network\n   * - web3\n   */\n  getWeb3(setState) {\n    const { showMessage, showWarningMessage } = this.props;\n    getWeb3.then((results) => {\n      const { web3 } = results;\n      const contract = new EtherollContract(web3);\n      const contractAddress = contract.address;\n      const pullIntervalSeconds = 10 * 1000;\n      // clearInterval() is in the componentWillUnmount()\n      this.getTransactionsIntervalId = setInterval((\n      ) => this.getTransactions(contract, setState), pullIntervalSeconds);\n      this.getTransactions(contract, setState);\n      setState({\n        web3,\n        network: Number(web3.version.network),\n        contract,\n        contractAddress,\n      });\n        setState({ minBet: 0.0001 });\n        setState({ minChances: 1 });\n        setState({ maxChances: 95 });\n\n\n      web3.eth.getBalance(contractAddress, (error, balance) => {\n        // error can be null with the balance also null in rare cases\n        if (error || balance === null) {\n          const message = \"Can't fetch contract balance.\";\n          this.showFetchContractInfoWarning(message);\n        } else {\n          const contractBalance = web3.fromWei(balance, 'ether').toNumber();\n          setState({ contractBalance });\n        }\n      });\n      web3.eth.getAccounts((error, accounts) => {\n        if (error) {\n          const message = \"Can't retrieve accounts.\";\n          showWarningMessage(message);\n        } else {\n          const accountAddress = accounts.length === 0 ? null : accounts[0];\n          if (accountAddress !== null) {\n            web3.eth.getBalance(accountAddress, (err, balance) => {\n              // error can be null with the balance also null in rare cases\n              if (err || balance === null) {\n                const message = \"Can't fetch account balance.\";\n                showWarningMessage(message);\n              } else {\n                const accountBalance = web3.fromWei(balance, 'ether').toNumber();\n                setState({ accountBalance });\n              }\n            });\n          }\n          setState({ accountAddress });\n        }\n      });\n    }, () => {\n      const classType = 'danger';\n      const message = (<>\n        {'No account connected, connect with a Web3-compatible wallet like '}\n        <MetaMaskLink />\n      </>);\n      showMessage(classType, message);\n    });\n  }\n\n  showFetchContractInfoWarning(optionalMessage) {\n    const { showWarningMessage } = this.props;\n    const defaultMessage = \"Can't fetch contract info.\";\n    const message = (typeof optionalMessage === 'undefined') ? defaultMessage : optionalMessage;\n    showWarningMessage(message);\n  }\n\n  filterTransactions(transactionsFilter, setState) {\n    // TODO: should be a prop via composition rather than inheritance\n    const { accountAddress, allTransactions } = this.state;\n    let filteredTransactions = allTransactions.slice();\n    if (transactionsFilter === '#my-transactions') {\n      filteredTransactions = allTransactions.filter(transaction => (\n        transaction.logBetEvent.args.from.toLowerCase() === accountAddress.toLowerCase()\n      ));\n    }\n    setState({ filteredTransactions, transactionsFilter });\n  }\n\n  updateState(key) {\n    return (value) => {\n      this.setState({ [key]: value });\n    };\n  }\n}\nBaseGame.propTypes = {\n  showMessage: PropTypes.func.isRequired,\n  showWarningMessage: PropTypes.func.isRequired,\n};\n\nexport default BaseGame;\n"]},"metadata":{},"sourceType":"module"}