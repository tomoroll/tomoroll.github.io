{"ast":null,"code":"var _jsxFileName = \"/Users/hoank/resource/N3Company/tomoroll-frontend/src/components/Transactions.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Address from './Address';\nimport Transaction from './Transaction';\n\nfunction MergedLog(_ref) {\n  var network = _ref.network,\n      mergedLog = _ref.mergedLog;\n  var logBetEvent = mergedLog.logBetEvent,\n      logResultEvent = mergedLog.logResultEvent;\n  var playerNumber = logBetEvent.args.prediction.toNumber();\n  var valueEth = '?';\n  var diceResult = '?';\n  var sign = '?';\n  var alertClass = 'secondary'; // resolved bet case\n\n  if (typeof logResultEvent !== 'undefined') {\n    diceResult = logResultEvent.args.luckynumber.toNumber();\n    var playerWon = diceResult < playerNumber;\n    valueEth = (logResultEvent.args.betvalue * Math.pow(10, -18)).toFixed(2);\n    sign = playerWon ? '<' : '>';\n    alertClass = playerWon ? 'success' : 'danger';\n  }\n\n  return React.createElement(\"div\", {\n    className: \"row d-inline-flex list-group-item list-group-item-\".concat(alertClass),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-sm-2 d-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, diceResult)), React.createElement(\"div\", {\n    className: \"col-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, valueEth, \"\\xA0 ETH\"), React.createElement(\"div\", {\n    className: \"w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, diceResult, \"\\xA0\", sign, \"\\xA0\", playerNumber), React.createElement(\"div\", {\n    className: \"w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Wallet: \\xA0\", React.createElement(Address, {\n    address: logBetEvent.args.from.toString(),\n    network: network,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Transaction: \\xA0\", React.createElement(Transaction, {\n    hash: logBetEvent.transactionHash,\n    network: network,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }))));\n}\n\nMergedLog.propTypes = {\n  network: PropTypes.number.isRequired,\n  mergedLog: PropTypes.shape({\n    // TODO: seems completely ignored\n    todo: PropTypes.number\n  }).isRequired\n};\n\nfunction TransactionsFilterButtons(_ref2) {\n  var _onClick = _ref2.onClick;\n  return React.createElement(\"nav\", {\n    className: \"nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-link active\",\n    onClick: function onClick() {\n      return _onClick('#all-transactions');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"All transactions\"), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-link\",\n    onClick: function onClick() {\n      return _onClick('#my-transactions');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"My transactions\"));\n}\n\nTransactionsFilterButtons.propTypes = {\n  onClick: PropTypes.func.isRequired\n};\n\nfunction Transactions(_ref3) {\n  var network = _ref3.network,\n      onClick = _ref3.onClick,\n      transactions = _ref3.transactions;\n  var reversedTransactions = transactions.slice().reverse();\n  var transactionsElems = reversedTransactions.map(function (transaction) {\n    return React.createElement(MergedLog, {\n      key: transaction.logBetEvent.transactionHash,\n      network: network,\n      mergedLog: transaction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    });\n  });\n  return React.createElement(\"div\", {\n    className: \"card transactions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(TransactionsFilterButtons, {\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"card-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"list-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, transactionsElems)));\n}\n\nTransactions.propTypes = {\n  network: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    // TODO: seems completely ignored\n    // https://github.com/facebook/prop-types/issues/181\n    todo: PropTypes.number\n  })).isRequired\n};\nexport default Transactions;","map":{"version":3,"sources":["/Users/hoank/resource/N3Company/tomoroll-frontend/src/components/Transactions.jsx"],"names":["React","PropTypes","Address","Transaction","MergedLog","network","mergedLog","logBetEvent","logResultEvent","playerNumber","args","prediction","toNumber","valueEth","diceResult","sign","alertClass","luckynumber","playerWon","betvalue","toFixed","from","toString","transactionHash","propTypes","number","isRequired","shape","todo","TransactionsFilterButtons","onClick","func","Transactions","transactions","reversedTransactions","slice","reverse","transactionsElems","map","transaction","arrayOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Address from './Address';\nimport Transaction from './Transaction';\n\n\nfunction MergedLog({ network, mergedLog }) {\n  const { logBetEvent, logResultEvent } = mergedLog;\n  const playerNumber = logBetEvent.args.prediction.toNumber();\n  let valueEth = '?';\n  let diceResult = '?';\n  let sign = '?';\n  let alertClass = 'secondary';\n  // resolved bet case\n  if (typeof logResultEvent !== 'undefined') {\n    diceResult = logResultEvent.args.luckynumber.toNumber();\n    const playerWon = diceResult < playerNumber;\n    valueEth = (logResultEvent.args.betvalue * (10 ** (-18))).toFixed(2);\n    sign = playerWon ? '<' : '>';\n    alertClass = playerWon ? 'success' : 'danger';\n  }\n  return (\n    <div className={`row d-inline-flex list-group-item list-group-item-${alertClass}`}>\n      <div className=\"col-sm-2 d-block\">\n        <h3>{diceResult}</h3>\n      </div>\n      <div className=\"col-10\">\n        <div className=\"w-100\">\n          {valueEth}\n          &nbsp;\n          ETH\n        </div>\n        <div className=\"w-100\">\n          {diceResult}\n          &nbsp;\n          {sign}\n          &nbsp;\n          {playerNumber}\n        </div>\n        <div className=\"w-100\">\n          Wallet:\n          &nbsp;\n          <Address address={logBetEvent.args.from.toString()} network={network} />\n        </div>\n        <div className=\"w-100\">\n          Transaction:\n          &nbsp;\n          <Transaction hash={logBetEvent.transactionHash} network={network} />\n        </div>\n      </div>\n    </div>\n  );\n}\nMergedLog.propTypes = {\n  network: PropTypes.number.isRequired,\n  mergedLog: PropTypes.shape({\n    // TODO: seems completely ignored\n    todo: PropTypes.number,\n  }).isRequired,\n};\n\nfunction TransactionsFilterButtons({ onClick }) {\n  return (\n    <nav className=\"nav\">\n      <button\n        type=\"button\"\n        className=\"btn btn-link active\"\n        onClick={() => onClick('#all-transactions')}\n      >\n          All transactions\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-link\"\n        onClick={() => onClick('#my-transactions')}\n      >\n          My transactions\n      </button>\n    </nav>\n  );\n}\nTransactionsFilterButtons.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nfunction Transactions({ network, onClick, transactions }) {\n  const reversedTransactions = transactions.slice().reverse();\n  const transactionsElems = reversedTransactions.map(transaction => (\n    <MergedLog\n      key={transaction.logBetEvent.transactionHash}\n      network={network}\n      mergedLog={transaction}\n    />\n  ));\n  return (\n    <div className=\"card transactions\">\n      <div className=\"card-header\">\n        <TransactionsFilterButtons onClick={onClick} />\n      </div>\n      <div className=\"card-body\">\n        <div className=\"list-group\">{transactionsElems}</div>\n      </div>\n    </div>\n  );\n}\nTransactions.propTypes = {\n  network: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    // TODO: seems completely ignored\n    // https://github.com/facebook/prop-types/issues/181\n    todo: PropTypes.number,\n  })).isRequired,\n};\n\n\nexport default Transactions;\n"]},"metadata":{},"sourceType":"module"}