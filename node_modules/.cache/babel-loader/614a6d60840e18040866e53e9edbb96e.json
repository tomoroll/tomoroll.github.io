{"ast":null,"code":"import _objectSpread from \"/Users/hoank/resource/N3Company/tmp/etheroll/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/hoank/resource/N3Company/tmp/etheroll/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hoank/resource/N3Company/tmp/etheroll/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/hoank/resource/N3Company/tmp/etheroll/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _contractAddresses, _etherscanUrls;\n\nimport etherollAbi from './etheroll-abi'; // TODO require vs import\n\nvar SolidityEvent = require('web3/lib/web3/event.js');\n\nvar Networks = Object.freeze({\n  mainnet: 1,\n  morden: 2,\n  ropsten: 3\n});\nvar contractAddresses = (_contractAddresses = {}, _defineProperty(_contractAddresses, Networks.mainnet, '0xA52e014B3f5Cc48287c2D483A3E026C32cc76E6d'), _defineProperty(_contractAddresses, Networks.ropsten, '0xe12c6dEb59f37011d2D9FdeC77A6f1A8f3B8B1e8'), _contractAddresses);\nvar etherscanUrls = (_etherscanUrls = {}, _defineProperty(_etherscanUrls, Networks.mainnet, 'https://etherscan.io'), _defineProperty(_etherscanUrls, Networks.ropsten, 'https://ropsten.etherscan.io'), _etherscanUrls);\n\nfunction getProfit(betSize, chances) {\n  var profit = 0;\n  var houseEdge = 1 / 100.0;\n  var chancesLoss = 100.0 - chances;\n\n  if (chances !== 0 && chancesLoss !== 0) {\n    var payout = chancesLoss / chances * betSize + betSize;\n    payout *= 1 - houseEdge;\n    profit = payout - betSize;\n  }\n\n  return profit;\n}\n\nvar EtherollContract =\n/*#__PURE__*/\nfunction () {\n  function EtherollContract(web3, address) {\n    _classCallCheck(this, EtherollContract);\n\n    this.web3 = web3;\n    this.address = address;\n\n    if (typeof address === 'undefined') {\n      this.address = contractAddresses[web3.version.network];\n    }\n\n    this.abi = etherollAbi;\n    this.web3Contract = web3.eth.contract(etherollAbi).at(this.address);\n  }\n\n  _createClass(EtherollContract, [{\n    key: \"getSolidityEvents\",\n    value: function getSolidityEvents() {\n      var _this = this;\n\n      var events = {};\n      this.abi.forEach(function (definition) {\n        if (definition.type !== 'event') {\n          return;\n        }\n\n        events[definition.name] = new SolidityEvent(_this.web3, definition, _this.address);\n      });\n      return events;\n    } // Returns sha3 signature of events, e.g.\n    // {'LogResult': '0x6883...5c88', 'LogBet': '0x1cb5...75c4'}\n\n  }, {\n    key: \"getEventSignatures\",\n    value: function getEventSignatures() {\n      var signatures = {};\n      var events = this.getSolidityEvents();\n      Object.keys(events).forEach(function (eventName) {\n        signatures[eventName] = events[eventName].signature();\n      });\n      return signatures;\n    }\n  }, {\n    key: \"getSolidityEvent\",\n    value: function getSolidityEvent(eventSignature) {\n      var events = this.getSolidityEvents();\n      var matchingEvent = Object.keys(events).filter(function (key) {\n        return events[key].signature() === eventSignature.replace('0x', '');\n      });\n      return events[matchingEvent];\n    }\n  }, {\n    key: \"decodeEvent\",\n    value: function decodeEvent(_evnt) {\n      // SolidityEvent.decode() seems to be mutating the object, hence the copy\n      var evnt = _objectSpread({}, _evnt);\n\n      var solidityEvent = this.getSolidityEvent(evnt.topics[0]);\n      var decoded = solidityEvent.decode(evnt);\n      return decoded;\n    } // callback(error, result)\n\n  }, {\n    key: \"getTransactionLogs\",\n    value: function getTransactionLogs(callback) {\n      var _this2 = this;\n\n      this.web3.eth.getBlockNumber(function (error, result) {\n        if (error) {\n          console.log(error);\n        } else {\n          var address = _this2.address;\n          var lastBlock = result;\n          var fromBlock = lastBlock - 100000;\n          var toBlock = lastBlock;\n          var options = {\n            address: address,\n            fromBlock: fromBlock,\n            toBlock: toBlock\n          };\n\n          var filter = _this2.web3.eth.filter(options);\n\n          filter.get(callback);\n        }\n      });\n    } // callback(error, result)\n\n  }, {\n    key: \"watchTransactionLogs\",\n    value: function watchTransactionLogs(callback) {\n      var _this3 = this;\n\n      this.web3.eth.getBlockNumber(function (error, result) {\n        if (error) {\n          console.log(error);\n        } else {\n          var address = _this3.address;\n          var lastBlock = result;\n          var fromBlock = lastBlock - 100000;\n          var toBlock = lastBlock;\n          var options = {\n            address: address,\n            fromBlock: fromBlock,\n            toBlock: toBlock\n          };\n\n          var filter = _this3.web3.eth.filter(options);\n\n          filter.watch(callback);\n        }\n      });\n    } // Merges bet logs (LogBet) with bet results logs (LogResult).\n\n  }, {\n    key: \"getMergedTransactionLogs\",\n    // callback(error, result)\n    value: function getMergedTransactionLogs(callback) {\n      var _this4 = this;\n\n      this.getTransactionLogs(function (error, result) {\n        if (error) {\n          console.log(error);\n        } else {\n          var decodedEvents = result.map(function (evnt) {\n            return _this4.decodeEvent(evnt);\n          });\n          var logBetEvents = decodedEvents.filter(function (evnt) {\n            return evnt.event === 'LogBet';\n          });\n          var logResultEvents = decodedEvents.filter(function (evnt) {\n            return evnt.event === 'LogResult';\n          });\n          var mergedLogs = EtherollContract.mergeLogs(logBetEvents, logResultEvents);\n          callback(error, mergedLogs);\n        }\n      });\n    }\n  }], [{\n    key: \"mergeLogs\",\n    value: function mergeLogs(logBetEvents, logResultEvents) {\n      // per bet ID dictionary\n      var logResultEventsDict = logResultEvents.reduce(function (dict, logResultEvent) {\n        return _objectSpread({}, dict, _defineProperty({}, logResultEvent.args.BetID, logResultEvent));\n      }, {});\n      return logBetEvents.map(function (logBetEvent) {\n        return {\n          logBetEvent: logBetEvent,\n          logResultEvent: logResultEventsDict[logBetEvent.args.BetID]\n        };\n      });\n    }\n  }]);\n\n  return EtherollContract;\n}();\n\nexport { EtherollContract, etherscanUrls, getProfit, Networks, contractAddresses };","map":{"version":3,"sources":["/Users/hoank/resource/N3Company/tmp/etheroll/src/utils/etheroll-contract.js"],"names":["etherollAbi","SolidityEvent","require","Networks","Object","freeze","mainnet","morden","ropsten","contractAddresses","etherscanUrls","getProfit","betSize","chances","profit","houseEdge","chancesLoss","payout","EtherollContract","web3","address","version","network","abi","web3Contract","eth","contract","at","events","forEach","definition","type","name","signatures","getSolidityEvents","keys","eventName","signature","eventSignature","matchingEvent","filter","key","replace","_evnt","evnt","solidityEvent","getSolidityEvent","topics","decoded","decode","callback","getBlockNumber","error","result","console","log","lastBlock","fromBlock","toBlock","options","get","watch","getTransactionLogs","decodedEvents","map","decodeEvent","logBetEvents","event","logResultEvents","mergedLogs","mergeLogs","logResultEventsDict","reduce","dict","logResultEvent","args","BetID","logBetEvent"],"mappings":"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","sourcesContent":["import etherollAbi from './etheroll-abi';\n\n// TODO require vs import\nconst SolidityEvent = require('web3/lib/web3/event.js');\n\nconst Networks = Object.freeze({ mainnet: 1, morden: 2, ropsten: 3 });\n\nconst contractAddresses = {\n  [Networks.mainnet]: '0xA52e014B3f5Cc48287c2D483A3E026C32cc76E6d',\n  [Networks.ropsten]: '0xe12c6dEb59f37011d2D9FdeC77A6f1A8f3B8B1e8',\n};\n\nconst etherscanUrls = {\n  [Networks.mainnet]: 'https://etherscan.io',\n  [Networks.ropsten]: 'https://ropsten.etherscan.io',\n};\n\nfunction getProfit(betSize, chances) {\n  let profit = 0;\n  const houseEdge = 1 / 100.0;\n  const chancesLoss = 100.0 - chances;\n  if (chances !== 0 && chancesLoss !== 0) {\n    let payout = ((chancesLoss / chances) * betSize) + betSize;\n    payout *= (1 - houseEdge);\n    profit = payout - betSize;\n  }\n  return profit;\n}\n\nclass EtherollContract {\n  constructor(web3, address) {\n    this.web3 = web3;\n    this.address = address;\n    if (typeof address === 'undefined') {\n      this.address = contractAddresses[web3.version.network];\n    }\n    this.abi = etherollAbi;\n    this.web3Contract = web3.eth.contract(etherollAbi).at(this.address);\n  }\n\n  getSolidityEvents() {\n    const events = {};\n    this.abi.forEach((definition) => {\n      if (definition.type !== 'event') {\n        return;\n      }\n      events[definition.name] = new SolidityEvent(this.web3, definition, this.address);\n    });\n    return events;\n  }\n\n  // Returns sha3 signature of events, e.g.\n  // {'LogResult': '0x6883...5c88', 'LogBet': '0x1cb5...75c4'}\n  getEventSignatures() {\n    const signatures = {};\n    const events = this.getSolidityEvents();\n    Object.keys(events).forEach((eventName) => {\n      signatures[eventName] = events[eventName].signature();\n    });\n    return signatures;\n  }\n\n  getSolidityEvent(eventSignature) {\n    const events = this.getSolidityEvents();\n    const matchingEvent = Object.keys(events).filter(key => (\n      events[key].signature() === eventSignature.replace('0x', '')\n    ));\n    return events[matchingEvent];\n  }\n\n  decodeEvent(_evnt) {\n    // SolidityEvent.decode() seems to be mutating the object, hence the copy\n    const evnt = { ..._evnt };\n    const solidityEvent = this.getSolidityEvent(evnt.topics[0]);\n    const decoded = solidityEvent.decode(evnt);\n    return decoded;\n  }\n\n  // callback(error, result)\n  getTransactionLogs(callback) {\n    this.web3.eth.getBlockNumber((error, result) => {\n      if (error) {\n        console.log(error);\n      } else {\n        const { address } = this;\n        const lastBlock = result;\n        const fromBlock = lastBlock - 100000;\n        const toBlock = lastBlock;\n        const options = {\n          address,\n          fromBlock,\n          toBlock,\n        };\n        const filter = this.web3.eth.filter(options);\n        filter.get(callback);\n      }\n    });\n  }\n\n  // callback(error, result)\n  watchTransactionLogs(callback) {\n    this.web3.eth.getBlockNumber((error, result) => {\n      if (error) {\n        console.log(error);\n      } else {\n        const { address } = this;\n        const lastBlock = result;\n        const fromBlock = lastBlock - 100000;\n        const toBlock = lastBlock;\n        const options = {\n          address,\n          fromBlock,\n          toBlock,\n        };\n        const filter = this.web3.eth.filter(options);\n        filter.watch(callback);\n      }\n    });\n  }\n\n  // Merges bet logs (LogBet) with bet results logs (LogResult).\n  static mergeLogs(logBetEvents, logResultEvents) {\n    // per bet ID dictionary\n    const logResultEventsDict = logResultEvents.reduce((dict, logResultEvent) => ({\n      ...dict,\n      [logResultEvent.args.BetID]: logResultEvent,\n    }), {});\n    return logBetEvents.map(logBetEvent => ({\n      logBetEvent,\n      logResultEvent: logResultEventsDict[logBetEvent.args.BetID],\n    }));\n  }\n\n  // callback(error, result)\n  getMergedTransactionLogs(callback) {\n    this.getTransactionLogs((error, result) => {\n      if (error) {\n        console.log(error);\n      } else {\n        const decodedEvents = result.map(evnt => this.decodeEvent(evnt));\n        const logBetEvents = decodedEvents.filter(evnt => (\n          evnt.event === 'LogBet'\n        ));\n        const logResultEvents = decodedEvents.filter(evnt => (\n          evnt.event === 'LogResult'\n        ));\n        const mergedLogs = EtherollContract.mergeLogs(logBetEvents, logResultEvents);\n        callback(error, mergedLogs);\n      }\n    });\n  }\n}\n\n\nexport {\n  EtherollContract, etherscanUrls, getProfit, Networks, contractAddresses,\n};\n"]},"metadata":{},"sourceType":"module"}